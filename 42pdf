#!/bin/bash

# MAIN code {

db_name=db.txt

check_errors() {
	if ! ping -c 1 google.com &> /dev/null; then
		echo "No internet connection"
		exit 1
	fi
	if [ ! -f $db_name ] || [ ! -s $db_name ]; then
		echo "$db_name does not exist or is empty"
		echo "Clone the repo and execute 42pdf from there"
		echo "git clone https://github.com/andrexandre/42_pdf_downloader.git && cd 42_pdf_downloader"
		exit 1
	fi
	if [ -z "$1" ]; then
		echo "No argument provided. Please provide a search term"
		exit 1
	fi
}

search_and_download() {
	if [ "$1" == "-u" ] && [ "$1" == "--update" ]; then
		update_db
	fi
	pdf_id=$(grep -i "$1" $db_name | tail -n 1)
	if [ -z "$pdf_id" ]; then
		echo "No pdf called $1 found"
		exit 1
	fi
	# parse pdf variables
	pdf_name=$(echo $pdf_id | cut -d' ' -f2- | tr ' ' '_')
	pdf_id=$(echo $pdf_id | awk '{print $1}')
	url=https://cdn.intra.42.fr/pdf/pdf/$pdf_id/en.subject.pdf
	curl -sfo $pdf_name.subject.pdf $url
	if [ $? -eq 0 ]; then
		echo "Downloaded $pdf_name subject, id: $pdf_id"
	else
		echo "Failed to download $pdf_name subject, id: $pdf_id"
		exit 1
	fi
}

update_log() {
	updating_started=false
	if [ ! -f old_db.txt ]; then
		echo there is no old_db.txt
		exit 1
	fi
	pdf_id=$(cat $db_name | tail -n 1 | awk '{print $1}')
	while IFS= read -r curr_line; do
		if [[ "$curr_line" == "$pdf_id" ]]; then
			updating_started=true
			echo Started updating from $pdf_id
			continue
		fi
		if [ "$updating_started" == true ]; then
			pdf_id=$(echo $curr_line | awk '{print $1}')
			url=https://cdn.intra.42.fr/pdf/pdf/$pdf_id/en.subject.pdf
			# commands to check the existance of pdf on server
			status_code=$(curl -s -f -o /dev/null -w "%{http_code}\n" --head $url)
			if [ "$status_code" -eq 200 ]; then
				pdf_name=$(curl -s -f -o - $url | pdftotext -l 1 - - | head -n 1)
				echo "$curr_line $pdf_name" >> $db_name
			fi
			echo "Progress: $pdf_id"
		fi
	done < old_db.txt
	if [ "$updating_started" == false ]; then
		echo There is nothing to update
	else
		echo Everything updated successfully
	fi
}

if [ "$1" != "-u" ] && [ "$1" != "--update" ]; then
	check_errors "$1"
	search_and_download "$1"
else
	update_log
fi

# MAIN code }
exit

# VAR
start_id=$(cat $db_name | tail -n 1 | awk '{print $1}')
pdf_id_range=100
let end_id=start_id+pdf_id_range

update_database_in_order()
{
	for (( i=start_id; i<=end_id; i++ ))
	do
		url=https://cdn.intra.42.fr/pdf/pdf/$i/en.subject.pdf
		status_code=$(curl -s -f -o /dev/null -w "%{http_code}\n" --head $url)
		if [ "$status_code" -eq 200 ]; then
			pdf_name=$(curl -s -f -o - $url | pdftotext -l 1 - - | head -n 1)
			echo "$i $pdf_name" >> db.txt
		fi
	done
}

update_database_real_fast()
{
	threads_num=50 # My pc - 50, 42 pc - 200
	seq $start_id $end_id | xargs -P $threads_num -I {} bash -c '
		url=https://cdn.intra.42.fr/pdf/pdf/{}/en.subject.pdf
		status_code=$(curl -s -f -o /dev/null -w "%{http_code}\n" --head $url)
		if [ "$status_code" -eq 200 ]; then
			pdf_name=$(curl -s -f -o - $url | pdftotext -l 1 - - | head -n 1)
			echo "{} $pdf_name" >> db.txt
		fi
	'
	sort -n -o db.txt db.txt
}

# update_database_in_order
# update_database_real_fast

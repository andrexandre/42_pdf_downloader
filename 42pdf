#!/bin/bash

check_errors() {
	if [ "$GITHUB_ACTIONS" = "true" ]; then
		return 0
	fi
	if ! ping -c 1 google.com &> /dev/null; then
		echo "Bad internet connection"
		exit 1
	fi
	if [ ! -f $db_name ] || [ ! -s $db_name ]; then
		echo "$db_name does not exist or is empty"
		echo "Clone the repo and execute 42pdf from there"
		echo "git clone https://github.com/andrexandre/42_pdf_downloader.git && cd 42_pdf_downloader"
		exit 1
	fi
	if [ -z "$1" ]; then
		echo "Usage: ./42pdf NAME/ID [OPTION]"
		exit 1
	fi
	if [ $# -gt 2 ]; then
		echo "42pdf: too many arguments"
		exit 1
	fi
}

search_and_download_by_name() {
	found_line_index=$(cat $db_name | cut -d' ' -f2- | grep -nwxi "$1" | tail -n 1 | awk -F':' '{print $1}')
	if [ -z "$found_line_index" ]; then
		echo "No pdf called $1 found"
		return 1
	fi
	# parse pdf variables
	pdf_id=$(sed -n "${found_line_index}p" $db_name | awk '{print $1}')
	pdf_name=$(sed -n "${found_line_index}p" $db_name | cut -d' ' -f2- | tr ' ' '_')
	url=https://cdn.intra.42.fr/pdf/pdf/$pdf_id/en.subject.pdf
	curl -sfo $pdf_name.subject.pdf $url
	if [ $? -eq 0 ]; then
		echo "Downloaded $pdf_name subject of id: $pdf_id"
	else
		echo "Probably $pdf_name subject of id: $pdf_id no longer exists"
		echo "Search on intra for $pdf_name to verify if it exists"
		return 1
	fi
}

migrate_database() {
	if [ ! -f new_db.txt ]; then
		echo There is no file new_db.txt
		return 1
	fi
	updating_started=false
	while IFS= read -r curr_line; do
		if [[ "$curr_line" == "$start_id" ]]; then
			updating_started=true
			echo Started migration from $start_id
			continue
		fi
		if [ "$updating_started" == true ]; then
			start_id=$(echo $curr_line | awk '{print $1}')
			url=https://cdn.intra.42.fr/pdf/pdf/$start_id/en.subject.pdf
			# commands to check the existance of pdf on server
			status_code=$(curl -s -f -o /dev/null -w "%{http_code}\n" --head $url)
			if [ "$status_code" -eq 200 ]; then
				pdf_name=$(curl -s -f -o - $url | pdftotext -l 1 - - | head -n 1)
				echo "$curr_line $pdf_name" >> $db_name
			fi
		fi
	done < new_db.txt
	if [ "$updating_started" == false ]; then
		echo There is nothing to migrate
	else
		echo Everything migrated successfully
	fi
}

update_database_in_order() {
	echo Started updating from $start_id to $end_id
	for (( i=start_id; i<=end_id; i++ ))
	do
		url=https://cdn.intra.42.fr/pdf/pdf/$i/en.subject.pdf
		status_code=$(curl -s -f -o /dev/null -w "%{http_code}\n" --head $url)
		if [ "$status_code" -eq 200 ]; then
			pdf_name=$(curl -s -f -o - $url | pdftotext -l 1 - - | head -n 1)
			echo "$i $pdf_name" >> db.txt
			# auto restart
			# let end_id=i+id_batch_size
		fi
	done
}

update_database_real_fast() {
	echo Started updating from $start_id to $end_id
	threads_num=200
	seq $start_id $end_id | xargs -P $threads_num -I {} bash -c '
		url=https://cdn.intra.42.fr/pdf/pdf/{}/en.subject.pdf
		status_code=$(curl -s -f -o /dev/null -w "%{http_code}\n" --head $url)
		if [ "$status_code" -eq 200 ]; then
			pdf_name=$(curl -s -f -o - $url | pdftotext -l 1 - - | head -n 1)
			echo "{} $pdf_name" >> db.txt
		fi
	'
	# $db_name it's not used here so i remeber that it can't be used on xargs
	sort -n -o db.txt db.txt
}

download_by_id() {
	pdf_id="$1"
	url=https://cdn.intra.42.fr/pdf/pdf/$pdf_id/en.subject.pdf
	curl -sfo temp.subject.pdf $url
	pdf_name=$(pdftotext -l 1 temp.subject.pdf - | head -n 1 | tr ' ' '_')
	mv temp.subject.pdf $pdf_name.subject.pdf
	if [ $? -eq 0 ]; then
		echo "Downloaded $pdf_name subject of id: $pdf_id"
	else
		echo "Probably $pdf_name subject of id: $pdf_id no longer exists"
		echo "Search on intra for $pdf_name to verify if it exists"
		return 1
	fi
}

main() {
	db_name=db.txt
	start_id=$(cat $db_name | tail -n 1 | awk '{print $1}')
	# this variables are only needed if --update/migrate is used
	id_batch_size=1000
	let start_id=start_id+1
	let end_id=start_id+id_batch_size
	
	# echo ac: $# av: $@
	# exit
	if [ "$1" == "--update" ]; then
		# update_database_in_order
		update_database_real_fast
	elif [ "$1" == "--migrate" ]; then
		migrate_database
	elif [[ "$1" =~ ^[0-9]+$ ]]; then
		download_by_id "$1"
	else
		search_and_download_by_name "$1"
	fi
}

check_errors "$@"
main "$@"
